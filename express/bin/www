#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('new:server');
var http = require('http');
var db = require('../db');

var fs = require('fs');

var https = require('http');
//var privateKey  = fs.readFileSync('/home/bookprof/ssl/keys/c4d2e_fe585_1095b1228c41205c7126915738e93fb8.key', 'utf8');
//var certificate = fs.readFileSync('/home/bookprof/ssl/certs/bookprofits_in_c4d2e_fe585_1540189790_7922e3bb2ccf3a009c999ca548444e28.crt','utf8');

//var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var WebSocketServer = require('ws').Server;
var wss = new WebSocketServer({
    server: server
});


wss.on('connection', function connection(ws) {

	app.use(function(req, res, next) {
		req.session.toClient = ws;
		next();
	})

	ws.on('message', function(request) {
		request = JSON.parse(request);
		var method = request['method'];
		console.log('Incoming request on server', request['method'], request.payload)
		switch(method) {
				

		}
	});
})



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
